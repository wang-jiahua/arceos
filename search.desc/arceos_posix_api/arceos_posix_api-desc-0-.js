searchState.loadedDescShard("arceos_posix_api", 0, "POSIX-compatible APIs for ArceOS modules\nA constant representing the current working directory\nDirectory wrapper for <code>axfs::fops::Directory</code>.\nWrapper struct for the namespace resource [<code>FD_TABLE</code>]\nFile wrapper for <code>axfs::fops::File</code>.\n一个规范化的文件路径表示\nA global hardlink manager\nAdd a file to the file descriptor table.\n返回底层路径的字符串切片\nConvert a C string to a Rust string\n返回此路径组件的迭代器\nPlatform-specific constants and parameters.\nReturn a copy of the inner table.\nPOSIX C types.\nDereference the resource automatically, according whether …\nDereference the resource from the given namespace.\nDereference the resource from the global namespace.\n判断此路径是否以给定后缀路径结尾\nWhether the path exists\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nOpen a directory by <code>fd</code>.\nGet a file by <code>fd</code>.\n处理路径并返回规范化后的 <code>FilePath</code>\nGet the inner node of the file.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n判断是否为目录（以 ‘/’ 结尾）\n判断是否为常规文件（不以 ‘/’ 结尾）\n判断是否为根目录\n将此路径与相对路径组件连接\n返回文件名或目录名组件\n从路径字符串创建一个新的 <code>FilePath</code>…\n返回父目录路径\nGet the path of the file.\nGet the path of the directory.\n判断此路径是否以给定前缀路径开头\nAccept for connections on a socket\nBind a address to a socket.\nGet clock time since booting\nClose a file by <code>fd</code>.\nConnects the socket to the address specified.\nDuplicate a file descriptor.\nDuplicate a file descriptor, but it uses the file …\nCreates a new epoll instance.\nControl interface for an epoll file descriptor\nWaits for events on the epoll instance referred to by the …\nExit current task\nManipulate file descriptor.\nFree queried <code>addrinfo</code> struct\nGet file metadata by <code>fd</code> and write into <code>buf</code>.\nGet current system time and store in specific struct\nQuery addresses for a domain name.\nGet the path of the current directory.\nGet peer address to which the socket sockfd is connected.\nGet current thread ID.\nGet resource limitations\nGet current address to which the socket sockfd is bound.\nListen for connections on a socket\nSet the position of the file indicated by <code>fd</code>.\nGet the metadata of the symbolic link and write into <code>buf</code>.\nSleep some nanoseconds\nOpen a file by <code>filename</code> and insert it into the file …\nOpen or create a file. fd: file descriptor filename: file …\nCreate a pipe\nCreate a new thread with the given entry point and …\nExits the current thread. The value <code>retval</code> will be …\nWaits for the given thread to exit, and stores the return …\nInitialize a mutex.\nLock the given mutex.\nUnlock the given mutex.\nReturns the <code>pthread</code> struct of current thread.\nRead data from the file indicated by <code>fd</code>.\nReceive a message on a socket.\nReceive a message on a socket and get its source address.\nRename <code>old</code> to <code>new</code> If new exists, it is first removed.\nRelinquish the CPU, and switches to another task.\nMonitor multiple file descriptors, waiting until one or …\nSend a message on a socket to the address connected.\nSend a message on a socket to the address specified.\nSet resource limitations\nShut down a full-duplex connection.\nCreate an socket for communication.\nGet the file metadata by <code>path</code> and write into <code>buf</code>.\nReturn system configuration infomation\nWrite data to the file indicated by <code>fd</code>.\nWrite a vector.\nArchitecture identifier.\nPlatform identifier.\nNumber of CPUs\nStack size of each task.\nNumber of timer ticks per second (Hz). A timer tick may …\nDevice specifications\nPlatform configs\nMMIO regions with format (<code>base_paddr</code>, <code>size</code>).\nEnd PCI bus number.\nBase physical address of the PCIe ECAM space (should read …\nPCI device memory ranges (not used on x86).\nTimer interrupt frequencyin Hz. (4.0GHz)\nVirtIO MMIO regions with format (<code>base_paddr</code>, <code>size</code>).\nPlatform family.\nKernel address space base.\nKernel address space size.\nBase physical address of the kernel image.\nBase virtual address of the kernel image.\nOffset of bus address and phys address. some boards, the …\nBase address of the whole physical memory.\nSize of the whole physical memory. (128M)\nLinear mapping offset, for quick conversions between …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")